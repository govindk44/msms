{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"http://localhost:8000\";\nconst axiosInstance = axios.create({\n  baseURL: apiUrl,\n  timeout: 5000,\n  headers: {\n    Authorization: sessionStorage.getItem(\"access_token\") ? \"Bearer \" + sessionStorage.getItem(\"access_token\") : null,\n    accept: \"application/json\"\n  }\n});\n\n// Function to refresh the token\nconst generateRefreshToken = async () => {\n  try {\n    const response = await axios.post(`${apiUrl}/api/token/refresh/`, {\n      refresh: sessionStorage.getItem(\"refresh_token\")\n    });\n    if (response.status === 200) {\n      const newAccessToken = response.data.access;\n      sessionStorage.setItem(\"access_token\", newAccessToken);\n      axiosInstance.defaults.headers.common[\"Authorization\"] = `Bearer ${newAccessToken}`;\n      return newAccessToken;\n    }\n  } catch (error) {\n    console.error(\"Error refreshing token\", error);\n    return null;\n  }\n};\n\n// Axios interceptor to handle token expiration\naxiosInstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const newAccessToken = await generateRefreshToken();\n    if (newAccessToken) {\n      originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\n      return axiosInstance(originalRequest);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Example login request\naxiosInstance.post(\"/api/admin/login/\", {\n  username: \"admin\",\n  password: \"password\"\n}).then(response => {\n  console.log(\"Login successful\", response.data);\n}).catch(error => {\n  console.error(\"Error logging in\", error);\n});\nexport { apiUrl, axiosInstance, generateRefreshToken };","map":{"version":3,"names":["axios","apiUrl","axiosInstance","create","baseURL","timeout","headers","Authorization","sessionStorage","getItem","accept","generateRefreshToken","response","post","refresh","status","newAccessToken","data","access","setItem","defaults","common","error","console","interceptors","use","originalRequest","config","_retry","Promise","reject","username","password","then","log","catch"],"sources":["D:/msms/frontend/src/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiUrl = \"http://localhost:8000\";\r\nconst axiosInstance = axios.create({\r\n  baseURL: apiUrl,\r\n  timeout: 5000,\r\n  headers: {\r\n    Authorization: sessionStorage.getItem(\"access_token\")\r\n      ? \"Bearer \" + sessionStorage.getItem(\"access_token\")\r\n      : null,\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n// Function to refresh the token\r\nconst generateRefreshToken = async () => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${apiUrl}/api/token/refresh/`,\r\n      {\r\n        refresh: sessionStorage.getItem(\"refresh_token\"),\r\n      }\r\n    );\r\n    if (response.status === 200) {\r\n      const newAccessToken = response.data.access;\r\n      sessionStorage.setItem(\"access_token\", newAccessToken);\r\n      axiosInstance.defaults.headers.common[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n      return newAccessToken;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error refreshing token\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Axios interceptor to handle token expiration\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      const newAccessToken = await generateRefreshToken();\r\n      if (newAccessToken) {\r\n        originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n        return axiosInstance(originalRequest);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Example login request\r\naxiosInstance\r\n  .post(\"/api/admin/login/\", {\r\n    username: \"admin\",\r\n    password: \"password\",\r\n  })\r\n  .then((response) => {\r\n    console.log(\"Login successful\", response.data);\r\n  })\r\n  .catch((error) => {\r\n    console.error(\"Error logging in\", error);\r\n  });\r\n\r\nexport { apiUrl, axiosInstance, generateRefreshToken };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,uBAAuB;AACtC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,MAAM;EACfI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACPC,aAAa,EAAEC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GACjD,SAAS,GAAGD,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GAClD,IAAI;IACRC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAC/B,GAAGZ,MAAM,qBAAqB,EAC9B;MACEa,OAAO,EAAEN,cAAc,CAACC,OAAO,CAAC,eAAe;IACjD,CACF,CAAC;IACD,IAAIG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,IAAI,CAACC,MAAM;MAC3CV,cAAc,CAACW,OAAO,CAAC,cAAc,EAAEH,cAAc,CAAC;MACtDd,aAAa,CAACkB,QAAQ,CAACd,OAAO,CAACe,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,cAAc,EAAE;MACnF,OAAOA,cAAc;IACvB;EACF,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACApB,aAAa,CAACsB,YAAY,CAACZ,QAAQ,CAACa,GAAG,CACpCb,QAAQ,IAAKA,QAAQ,EACtB,MAAOU,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACK,MAAM;EACpC,IAAIL,KAAK,CAACV,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAI,CAACW,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMZ,cAAc,GAAG,MAAML,oBAAoB,CAAC,CAAC;IACnD,IAAIK,cAAc,EAAE;MAClBU,eAAe,CAACpB,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUU,cAAc,EAAE;MACrE,OAAOd,aAAa,CAACwB,eAAe,CAAC;IACvC;EACF;EACA,OAAOG,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACApB,aAAa,CACVW,IAAI,CAAC,mBAAmB,EAAE;EACzBkB,QAAQ,EAAE,OAAO;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC,CACDC,IAAI,CAAErB,QAAQ,IAAK;EAClBW,OAAO,CAACW,GAAG,CAAC,kBAAkB,EAAEtB,QAAQ,CAACK,IAAI,CAAC;AAChD,CAAC,CAAC,CACDkB,KAAK,CAAEb,KAAK,IAAK;EAChBC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;AAC1C,CAAC,CAAC;AAEJ,SAASrB,MAAM,EAAEC,aAAa,EAAES,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}