{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { useLocation } from 'react-router-dom';\n\n// const PaymentForm = () => {\n//   const [amount, setAmount] = useState(0);\n//   const [error, setError] = useState(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   const location = useLocation();\n//   const totalPrice = location.state?.totalPrice || 0;\n\n//   // Ensure the amount is in rupees and not paise\n//   useEffect(() => {\n//     if (totalPrice > 0) {\n//       setAmount(totalPrice / 100); // Convert paise to rupees if needed\n//     } else {\n//       setError('Invalid total price');\n//     }\n//   }, [totalPrice]);\n\n//   const refreshToken = async () => {\n//     const refreshToken = localStorage.getItem('refresh_token');\n//     if (!refreshToken) {\n//       setError('No refresh token available');\n//       return null;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:8000/api/token/refresh/', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ refresh: refreshToken }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem('auth_token', data.access); // Save the new access token\n//         return data.access;\n//       } else {\n//         setError('Failed to refresh token');\n//         return null;\n//       }\n//     } catch (err) {\n//       setError('Error refreshing token');\n//       return null;\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (processing) return;\n\n//     setProcessing(true);\n//     let token = localStorage.getItem('auth_token');\n//     const userId = sessionStorage.getItem('user_id');\n\n//     if (!token || !userId) {\n//         setError('Authentication required. Please log in.');\n//         setProcessing(false);\n//         return;\n//     }\n\n//     // Log token to verify it's correct\n//     console.log(\"Token before request:\", token);\n\n//     // Attempt to place the order with the current token\n//     const orderData = {\n//         userId,\n//         amount: amount * 100,  // Convert amount to paise for the backend\n//         payment_method: 'COD',  // Example payment method\n//     };\n\n//     try {\n//         const response = await fetch(`http://localhost:8000/medical_store_app/place-order/${userId}/`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': `Bearer ${token}`,\n//             },\n//             body: JSON.stringify(orderData),\n//         });\n\n//         if (response.status === 401) {\n//             // Token is invalid or expired, try to refresh it\n//             console.log(\"Token expired, refreshing...\");\n\n//             token = await refreshToken();\n//             if (!token) {\n//                 setProcessing(false);\n//                 return;\n//             }\n\n//             // Log refreshed token\n//             console.log(\"Refreshed Token:\", token);\n\n//             // Retry placing the order with the new token\n//             const retryResponse = await fetch(`http://localhost:8000/medical_store_app/place-order/${userId}/`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}`,\n//                 },\n//                 body: JSON.stringify(orderData),\n//             });\n\n//             if (retryResponse.ok) {\n//                 const data = await retryResponse.json();\n//                 alert(`Order placed successfully: ${data.message}`);\n//             } else {\n//                 const errorData = await retryResponse.json();\n//                 setError(errorData.error || 'Failed to place the order');\n//             }\n//         } else if (response.ok) {\n//             const data = await response.json();\n//             alert(`Order placed successfully: ${data.message}`);\n//         } else {\n//             const errorData = await response.json();\n//             setError(errorData.error || 'Failed to place the order');\n//         }\n//     } catch (err) {\n//         setError('An error occurred while processing the order');\n//     }\n\n//     setProcessing(false);\n//   };\n\n//   return (\n//     <div style={styles.container}>\n//       <h2 style={styles.heading}>Payment</h2>\n//       {error && <div style={styles.error}>{error}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label style={styles.label}>Amount</label>\n//           <input\n//             type=\"number\"\n//             value={amount}  // Display amount in rupees\n//             readOnly\n//             style={styles.input}\n//           />\n//         </div>\n//         <div>\n//           <button\n//             type=\"submit\"\n//             style={processing ? { ...styles.button, ...styles.buttonDisabled } : styles.button}\n//             disabled={processing}\n//           >\n//             {processing ? 'Processing...' : 'Place Order'}\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// const styles = {\n//   container: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     marginTop: '50px',\n//     fontFamily: 'Arial, sans-serif',\n//     width: '100%',\n//     maxWidth: '500px',\n//     margin: '0 auto',\n//     padding: '20px',\n//     borderRadius: '10px',\n//     boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n//   },\n//   heading: {\n//     fontSize: '24px',\n//     marginBottom: '20px',\n//   },\n//   label: {\n//     marginBottom: '10px',\n//     fontSize: '16px',\n//     fontWeight: 'bold',\n//   },\n//   input: {\n//     marginBottom: '20px',\n//     padding: '10px',\n//     fontSize: '16px',\n//     borderRadius: '5px',\n//     border: '1px solid #ddd',\n//     width: '100%',\n//   },\n//   button: {\n//     padding: '10px 20px',\n//     fontSize: '16px',\n//     backgroundColor: '#4CAF50',\n//     color: 'white',\n//     border: 'none',\n//     borderRadius: '5px',\n//     cursor: 'pointer',\n//     transition: 'background-color 0.3s ease',\n//   },\n//   buttonDisabled: {\n//     backgroundColor: '#ccc',\n//     cursor: 'not-allowed',\n//   },\n//   error: {\n//     color: 'red',\n//     fontSize: '14px',\n//     marginTop: '10px',\n//   },\n// };\n\n// export default PaymentForm;","map":{"version":3,"names":[],"sources":["C:/msms/msms/frontend/src/postlogin/User/PaymentForm.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useLocation } from 'react-router-dom';\r\n\r\n// const PaymentForm = () => {\r\n//   const [amount, setAmount] = useState(0);\r\n//   const [error, setError] = useState(null);\r\n//   const [processing, setProcessing] = useState(false);\r\n\r\n//   const location = useLocation();\r\n//   const totalPrice = location.state?.totalPrice || 0;\r\n\r\n//   // Ensure the amount is in rupees and not paise\r\n//   useEffect(() => {\r\n//     if (totalPrice > 0) {\r\n//       setAmount(totalPrice / 100); // Convert paise to rupees if needed\r\n//     } else {\r\n//       setError('Invalid total price');\r\n//     }\r\n//   }, [totalPrice]);\r\n\r\n//   const refreshToken = async () => {\r\n//     const refreshToken = localStorage.getItem('refresh_token');\r\n//     if (!refreshToken) {\r\n//       setError('No refresh token available');\r\n//       return null;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/api/token/refresh/', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ refresh: refreshToken }),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         localStorage.setItem('auth_token', data.access); // Save the new access token\r\n//         return data.access;\r\n//       } else {\r\n//         setError('Failed to refresh token');\r\n//         return null;\r\n//       }\r\n//     } catch (err) {\r\n//       setError('Error refreshing token');\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     if (processing) return;\r\n\r\n//     setProcessing(true);\r\n//     let token = localStorage.getItem('auth_token');\r\n//     const userId = sessionStorage.getItem('user_id');\r\n\r\n//     if (!token || !userId) {\r\n//         setError('Authentication required. Please log in.');\r\n//         setProcessing(false);\r\n//         return;\r\n//     }\r\n\r\n//     // Log token to verify it's correct\r\n//     console.log(\"Token before request:\", token);\r\n\r\n//     // Attempt to place the order with the current token\r\n//     const orderData = {\r\n//         userId,\r\n//         amount: amount * 100,  // Convert amount to paise for the backend\r\n//         payment_method: 'COD',  // Example payment method\r\n//     };\r\n\r\n//     try {\r\n//         const response = await fetch(`http://localhost:8000/medical_store_app/place-order/${userId}/`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//                 'Authorization': `Bearer ${token}`,\r\n//             },\r\n//             body: JSON.stringify(orderData),\r\n//         });\r\n\r\n//         if (response.status === 401) {\r\n//             // Token is invalid or expired, try to refresh it\r\n//             console.log(\"Token expired, refreshing...\");\r\n\r\n//             token = await refreshToken();\r\n//             if (!token) {\r\n//                 setProcessing(false);\r\n//                 return;\r\n//             }\r\n\r\n//             // Log refreshed token\r\n//             console.log(\"Refreshed Token:\", token);\r\n\r\n//             // Retry placing the order with the new token\r\n//             const retryResponse = await fetch(`http://localhost:8000/medical_store_app/place-order/${userId}/`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}`,\r\n//                 },\r\n//                 body: JSON.stringify(orderData),\r\n//             });\r\n\r\n//             if (retryResponse.ok) {\r\n//                 const data = await retryResponse.json();\r\n//                 alert(`Order placed successfully: ${data.message}`);\r\n//             } else {\r\n//                 const errorData = await retryResponse.json();\r\n//                 setError(errorData.error || 'Failed to place the order');\r\n//             }\r\n//         } else if (response.ok) {\r\n//             const data = await response.json();\r\n//             alert(`Order placed successfully: ${data.message}`);\r\n//         } else {\r\n//             const errorData = await response.json();\r\n//             setError(errorData.error || 'Failed to place the order');\r\n//         }\r\n//     } catch (err) {\r\n//         setError('An error occurred while processing the order');\r\n//     }\r\n\r\n//     setProcessing(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={styles.container}>\r\n//       <h2 style={styles.heading}>Payment</h2>\r\n//       {error && <div style={styles.error}>{error}</div>}\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label style={styles.label}>Amount</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             value={amount}  // Display amount in rupees\r\n//             readOnly\r\n//             style={styles.input}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <button\r\n//             type=\"submit\"\r\n//             style={processing ? { ...styles.button, ...styles.buttonDisabled } : styles.button}\r\n//             disabled={processing}\r\n//           >\r\n//             {processing ? 'Processing...' : 'Place Order'}\r\n//           </button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const styles = {\r\n//   container: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     alignItems: 'center',\r\n//     marginTop: '50px',\r\n//     fontFamily: 'Arial, sans-serif',\r\n//     width: '100%',\r\n//     maxWidth: '500px',\r\n//     margin: '0 auto',\r\n//     padding: '20px',\r\n//     borderRadius: '10px',\r\n//     boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\r\n//   },\r\n//   heading: {\r\n//     fontSize: '24px',\r\n//     marginBottom: '20px',\r\n//   },\r\n//   label: {\r\n//     marginBottom: '10px',\r\n//     fontSize: '16px',\r\n//     fontWeight: 'bold',\r\n//   },\r\n//   input: {\r\n//     marginBottom: '20px',\r\n//     padding: '10px',\r\n//     fontSize: '16px',\r\n//     borderRadius: '5px',\r\n//     border: '1px solid #ddd',\r\n//     width: '100%',\r\n//   },\r\n//   button: {\r\n//     padding: '10px 20px',\r\n//     fontSize: '16px',\r\n//     backgroundColor: '#4CAF50',\r\n//     color: 'white',\r\n//     border: 'none',\r\n//     borderRadius: '5px',\r\n//     cursor: 'pointer',\r\n//     transition: 'background-color 0.3s ease',\r\n//   },\r\n//   buttonDisabled: {\r\n//     backgroundColor: '#ccc',\r\n//     cursor: 'not-allowed',\r\n//   },\r\n//   error: {\r\n//     color: 'red',\r\n//     fontSize: '14px',\r\n//     marginTop: '10px',\r\n//   },\r\n// };\r\n\r\n// export default PaymentForm;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}