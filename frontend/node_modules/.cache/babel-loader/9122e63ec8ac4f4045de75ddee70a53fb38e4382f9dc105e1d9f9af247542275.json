{"ast":null,"code":"import AuthHandler from \"./AuthHandler\";\nimport Axios from \"axios\";\nimport Config from \"./Config\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nclass APIHandler {\n  async checkLogin() {\n    if (AuthHandler.checkTokenExpiry()) {\n      try {\n        const response = await Axios.post(Config.refreshApiUrl, {\n          refresh: AuthHandler.getRefreshToken()\n        });\n        reactLocalStorage.set(\"token\", response.data.access);\n      } catch (error) {\n        console.log(error);\n        AuthHandler.logoutUser();\n        window.location = \"/\";\n      }\n    }\n  }\n  async saveCompanyData(name, license_no, address, contact_no, email, description) {\n    await this.checkLogin();\n    try {\n      const response = await Axios.post(Config.companyApiUrl, {\n        name,\n        license_no,\n        address,\n        contact_no,\n        email,\n        description\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error(\"Error saving company data:\", error);\n      throw error; // rethrow or handle the error as needed\n    }\n  }\n  async fetchAllCompany() {\n    await this.checkLogin();\n    try {\n      const response = await Axios.get(Config.companyApiUrl, {\n        headers: {\n          Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error(\"Error fetching all companies:\", error);\n      throw error;\n    }\n  }\n  async fetchHomePage() {\n    await this.checkLogin();\n    try {\n      const response = await Axios.get(Config.homeApiUrl, {\n        headers: {\n          Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error(\"Error fetching home page:\", error);\n      throw error;\n    }\n  }\n\n  // ... repeat similar try-catch structure for other methods\n\n  async fetchCompanyDetails(id) {\n    await this.checkLogin();\n    try {\n      const response = await Axios.get(`${Config.companyApiUrl}${id}/`, {\n        headers: {\n          Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error(\"Error fetching company details:\", error);\n      throw error;\n    }\n  }\n\n  // Similarly, update the other methods (e.g., fetchMedicineByName, editCompanyData, etc.) \n  // with try-catch blocks and proper URL concatenation\n}\nexport default APIHandler;","map":{"version":3,"names":["AuthHandler","Axios","Config","reactLocalStorage","APIHandler","checkLogin","checkTokenExpiry","response","post","refreshApiUrl","refresh","getRefreshToken","set","data","access","error","console","log","logoutUser","window","location","saveCompanyData","name","license_no","address","contact_no","email","description","companyApiUrl","headers","Authorization","getLoginToken","fetchAllCompany","get","fetchHomePage","homeApiUrl","fetchCompanyDetails","id"],"sources":["D:/MSMS/frontend/src/utils/APIHandler.js"],"sourcesContent":["import AuthHandler from \"./AuthHandler\";\r\nimport Axios from \"axios\";\r\nimport Config from \"./Config\"; \r\nimport { reactLocalStorage } from \"reactjs-localstorage\"; \r\n\r\nclass APIHandler {\r\n  async checkLogin() {\r\n    if (AuthHandler.checkTokenExpiry()) {\r\n      try {\r\n        const response = await Axios.post(Config.refreshApiUrl, {\r\n          refresh: AuthHandler.getRefreshToken(),\r\n        });\r\n        reactLocalStorage.set(\"token\", response.data.access);\r\n      } catch (error) {\r\n        console.log(error);\r\n        AuthHandler.logoutUser();\r\n        window.location = \"/\";\r\n      }\r\n    }\r\n  }\r\n\r\n  async saveCompanyData(name, license_no, address, contact_no, email, description) {\r\n    await this.checkLogin();\r\n    try {\r\n      const response = await Axios.post(\r\n        Config.companyApiUrl,\r\n        { name, license_no, address, contact_no, email, description },\r\n        { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\r\n      );\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error saving company data:\", error);\r\n      throw error; // rethrow or handle the error as needed\r\n    }\r\n  }\r\n\r\n  async fetchAllCompany() {\r\n    await this.checkLogin();\r\n    try {\r\n      const response = await Axios.get(Config.companyApiUrl, {\r\n        headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching all companies:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async fetchHomePage() {\r\n    await this.checkLogin();\r\n    try {\r\n      const response = await Axios.get(Config.homeApiUrl, {\r\n        headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching home page:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ... repeat similar try-catch structure for other methods\r\n\r\n  async fetchCompanyDetails(id) {\r\n    await this.checkLogin();\r\n    try {\r\n      const response = await Axios.get(`${Config.companyApiUrl}${id}/`, {\r\n        headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching company details:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Similarly, update the other methods (e.g., fetchMedicineByName, editCompanyData, etc.) \r\n  // with try-catch blocks and proper URL concatenation\r\n\r\n} \r\n\r\nexport default APIHandler;\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,iBAAiB,QAAQ,sBAAsB;AAExD,MAAMC,UAAU,CAAC;EACf,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAIL,WAAW,CAACM,gBAAgB,CAAC,CAAC,EAAE;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACN,MAAM,CAACO,aAAa,EAAE;UACtDC,OAAO,EAAEV,WAAW,CAACW,eAAe,CAAC;QACvC,CAAC,CAAC;QACFR,iBAAiB,CAACS,GAAG,CAAC,OAAO,EAAEL,QAAQ,CAACM,IAAI,CAACC,MAAM,CAAC;MACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClBf,WAAW,CAACkB,UAAU,CAAC,CAAC;QACxBC,MAAM,CAACC,QAAQ,GAAG,GAAG;MACvB;IACF;EACF;EAEA,MAAMC,eAAeA,CAACC,IAAI,EAAEC,UAAU,EAAEC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAEC,WAAW,EAAE;IAC/E,MAAM,IAAI,CAACtB,UAAU,CAAC,CAAC;IACvB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAC/BN,MAAM,CAAC0B,aAAa,EACpB;QAAEN,IAAI;QAAEC,UAAU;QAAEC,OAAO;QAAEC,UAAU;QAAEC,KAAK;QAAEC;MAAY,CAAC,EAC7D;QAAEE,OAAO,EAAE;UAAEC,aAAa,EAAE,SAAS,GAAG9B,WAAW,CAAC+B,aAAa,CAAC;QAAE;MAAE,CACxE,CAAC;MACD,OAAOxB,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK,CAAC,CAAC;IACf;EACF;EAEA,MAAMiB,eAAeA,CAAA,EAAG;IACtB,MAAM,IAAI,CAAC3B,UAAU,CAAC,CAAC;IACvB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACgC,GAAG,CAAC/B,MAAM,CAAC0B,aAAa,EAAE;QACrDC,OAAO,EAAE;UAAEC,aAAa,EAAE,SAAS,GAAG9B,WAAW,CAAC+B,aAAa,CAAC;QAAE;MACpE,CAAC,CAAC;MACF,OAAOxB,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMmB,aAAaA,CAAA,EAAG;IACpB,MAAM,IAAI,CAAC7B,UAAU,CAAC,CAAC;IACvB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACgC,GAAG,CAAC/B,MAAM,CAACiC,UAAU,EAAE;QAClDN,OAAO,EAAE;UAAEC,aAAa,EAAE,SAAS,GAAG9B,WAAW,CAAC+B,aAAa,CAAC;QAAE;MACpE,CAAC,CAAC;MACF,OAAOxB,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;;EAEA;;EAEA,MAAMqB,mBAAmBA,CAACC,EAAE,EAAE;IAC5B,MAAM,IAAI,CAAChC,UAAU,CAAC,CAAC;IACvB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACgC,GAAG,CAAC,GAAG/B,MAAM,CAAC0B,aAAa,GAAGS,EAAE,GAAG,EAAE;QAChER,OAAO,EAAE;UAAEC,aAAa,EAAE,SAAS,GAAG9B,WAAW,CAAC+B,aAAa,CAAC;QAAE;MACpE,CAAC,CAAC;MACF,OAAOxB,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA;AAEF;AAEA,eAAeX,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}