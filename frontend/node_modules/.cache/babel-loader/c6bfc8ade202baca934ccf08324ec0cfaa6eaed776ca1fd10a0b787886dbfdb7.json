{"ast":null,"code":"import axios from \"axios\";\nimport Config from \"./Config\";\nclass APIHandler {\n  // Fetching company data with axios\n  async fetchCompanyOnly() {\n    try {\n      const response = await axios.get(\"/api/companies\"); // Replace with correct API endpoint\n      return {\n        data: response.data\n      }; // Assuming the API response structure\n    } catch (error) {\n      console.error(\"Error fetching company data:\", error);\n      return {\n        data: []\n      }; // Return an empty array in case of error\n    }\n  }\n\n  // Fetching all medicines with axios\n  async fetchAllMedicine() {\n    try {\n      const response = await axios.get(\"/api/medicines\"); // Replace with correct API endpoint\n      return {\n        data: response.data\n      }; // Assuming the API response structure\n    } catch (error) {\n      console.error(\"Error fetching medicine data:\", error);\n      return {\n        data: []\n      }; // Return an empty array in case of error\n    }\n  }\n\n  // Example of an edit method using axios for medicine data\n  async editMedicineData(name, medical_typ, buy_price, sell_price, c_gst, s_gst, batch_no, shelf_no, expire_date, mfg_date, company_id, description, in_stock_total, qty_in_strip, medicineDetails, medicineId) {\n    try {\n      const response = await axios.put(`/api/medicines/${medicineId}`, {\n        name,\n        medical_typ,\n        buy_price,\n        sell_price,\n        c_gst,\n        s_gst,\n        batch_no,\n        shelf_no,\n        expire_date,\n        mfg_date,\n        company_id,\n        description,\n        in_stock_total,\n        qty_in_strip,\n        medicine_details: medicineDetails\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error editing medicine data:\", error);\n      return {\n        error: true,\n        message: \"Failed to edit medicine data\"\n      };\n    }\n  }\n}\nexport default APIHandler;","map":{"version":3,"names":["axios","Config","APIHandler","fetchCompanyOnly","response","get","data","error","console","fetchAllMedicine","editMedicineData","name","medical_typ","buy_price","sell_price","c_gst","s_gst","batch_no","shelf_no","expire_date","mfg_date","company_id","description","in_stock_total","qty_in_strip","medicineDetails","medicineId","put","medicine_details","message"],"sources":["D:/MSMS/frontend/src/utils/APIHandler.js"],"sourcesContent":["import axios from \"axios\";\r\nimport Config from \"./Config\";\r\n\r\nclass APIHandler {\r\n  // Fetching company data with axios\r\n  async fetchCompanyOnly() {\r\n    try {\r\n      const response = await axios.get(\"/api/companies\"); // Replace with correct API endpoint\r\n      return { data: response.data }; // Assuming the API response structure\r\n    } catch (error) {\r\n      console.error(\"Error fetching company data:\", error);\r\n      return { data: [] }; // Return an empty array in case of error\r\n    }\r\n  }\r\n\r\n  // Fetching all medicines with axios\r\n  async fetchAllMedicine() {\r\n    try {\r\n      const response = await axios.get(\"/api/medicines\"); // Replace with correct API endpoint\r\n      return { data: response.data }; // Assuming the API response structure\r\n    } catch (error) {\r\n      console.error(\"Error fetching medicine data:\", error);\r\n      return { data: [] }; // Return an empty array in case of error\r\n    }\r\n  }\r\n\r\n  // Example of an edit method using axios for medicine data\r\n  async editMedicineData(name, medical_typ, buy_price, sell_price, c_gst, s_gst, batch_no, shelf_no, expire_date, mfg_date, company_id, description, in_stock_total, qty_in_strip, medicineDetails, medicineId) {\r\n    try {\r\n      const response = await axios.put(`/api/medicines/${medicineId}`, {\r\n        name, \r\n        medical_typ, \r\n        buy_price, \r\n        sell_price, \r\n        c_gst, \r\n        s_gst, \r\n        batch_no, \r\n        shelf_no, \r\n        expire_date, \r\n        mfg_date, \r\n        company_id, \r\n        description, \r\n        in_stock_total, \r\n        qty_in_strip, \r\n        medicine_details: medicineDetails\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error editing medicine data:\", error);\r\n      return { error: true, message: \"Failed to edit medicine data\" };\r\n    }\r\n  }\r\n}\r\n\r\nexport default APIHandler;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;MACpD,OAAO;QAAEC,IAAI,EAAEF,QAAQ,CAACE;MAAK,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC,CAAC,CAAC;IACvB;EACF;;EAEA;EACA,MAAMG,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;MACpD,OAAO;QAAEC,IAAI,EAAEF,QAAQ,CAACE;MAAK,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC,CAAC,CAAC;IACvB;EACF;;EAEA;EACA,MAAMI,gBAAgBA,CAACC,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAEC,cAAc,EAAEC,YAAY,EAAEC,eAAe,EAAEC,UAAU,EAAE;IAC5M,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMJ,KAAK,CAAC2B,GAAG,CAAC,kBAAkBD,UAAU,EAAE,EAAE;QAC/Df,IAAI;QACJC,WAAW;QACXC,SAAS;QACTC,UAAU;QACVC,KAAK;QACLC,KAAK;QACLC,QAAQ;QACRC,QAAQ;QACRC,WAAW;QACXC,QAAQ;QACRC,UAAU;QACVC,WAAW;QACXC,cAAc;QACdC,YAAY;QACZI,gBAAgB,EAAEH;MACpB,CAAC,CAAC;MACF,OAAOrB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO;QAAEA,KAAK,EAAE,IAAI;QAAEsB,OAAO,EAAE;MAA+B,CAAC;IACjE;EACF;AACF;AAEA,eAAe3B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}