{"ast":null,"code":"import { reactLocalStorage } from \"reactjs-localstorage\";\nclass AuthHandler {\n  // Check if the user is logged in\n  static loggedIn() {\n    return reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\");\n  }\n\n  // Get login token\n  static getLoginToken() {\n    return reactLocalStorage.get(\"token\");\n  }\n\n  // Get refresh token\n  static getRefreshToken() {\n    return reactLocalStorage.get(\"refresh\");\n  }\n\n  // Logout user and clear tokens\n  static logoutUser() {\n    reactLocalStorage.remove(\"token\");\n    reactLocalStorage.remove(\"refresh\");\n  }\n\n  // Check if the token has expired\n  static checkTokenExpiry() {\n    const token = this.getLoginToken();\n    if (!token) return false;\n    try {\n      const tokenArray = token.split(\".\");\n      const jwt = JSON.parse(atob(tokenArray[1])); // Decoding the JWT payload\n      if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\n        const expiry = jwt.exp * 1000;\n        return Date.now() > expiry;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error checking token expiry:\", error);\n      return false;\n    }\n  }\n}\nexport default AuthHandler;","map":{"version":3,"names":["reactLocalStorage","AuthHandler","loggedIn","get","getLoginToken","getRefreshToken","logoutUser","remove","checkTokenExpiry","token","tokenArray","split","jwt","JSON","parse","atob","exp","Number","isFinite","expiry","Date","now","error","console"],"sources":["D:/MSMS/frontend/src/utils/AuthHandler.js"],"sourcesContent":["import { reactLocalStorage } from \"reactjs-localstorage\";\r\n\r\nclass AuthHandler {\r\n  // Check if the user is logged in\r\n  static loggedIn() {\r\n    return reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\");\r\n  }\r\n\r\n  // Get login token\r\n  static getLoginToken() {\r\n    return reactLocalStorage.get(\"token\");\r\n  }\r\n\r\n  // Get refresh token\r\n  static getRefreshToken() {\r\n    return reactLocalStorage.get(\"refresh\");\r\n  }\r\n\r\n  // Logout user and clear tokens\r\n  static logoutUser() {\r\n    reactLocalStorage.remove(\"token\");\r\n    reactLocalStorage.remove(\"refresh\");\r\n  }\r\n\r\n  // Check if the token has expired\r\n  static checkTokenExpiry() {\r\n    const token = this.getLoginToken();\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const tokenArray = token.split(\".\");\r\n      const jwt = JSON.parse(atob(tokenArray[1])); // Decoding the JWT payload\r\n      if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\r\n        const expiry = jwt.exp * 1000;\r\n        return Date.now() > expiry;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error(\"Error checking token expiry:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthHandler;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,sBAAsB;AAExD,MAAMC,WAAW,CAAC;EAChB;EACA,OAAOC,QAAQA,CAAA,EAAG;IAChB,OAAOF,iBAAiB,CAACG,GAAG,CAAC,OAAO,CAAC,IAAIH,iBAAiB,CAACG,GAAG,CAAC,SAAS,CAAC;EAC3E;;EAEA;EACA,OAAOC,aAAaA,CAAA,EAAG;IACrB,OAAOJ,iBAAiB,CAACG,GAAG,CAAC,OAAO,CAAC;EACvC;;EAEA;EACA,OAAOE,eAAeA,CAAA,EAAG;IACvB,OAAOL,iBAAiB,CAACG,GAAG,CAAC,SAAS,CAAC;EACzC;;EAEA;EACA,OAAOG,UAAUA,CAAA,EAAG;IAClBN,iBAAiB,CAACO,MAAM,CAAC,OAAO,CAAC;IACjCP,iBAAiB,CAACO,MAAM,CAAC,SAAS,CAAC;EACrC;;EAEA;EACA,OAAOC,gBAAgBA,CAAA,EAAG;IACxB,MAAMC,KAAK,GAAG,IAAI,CAACL,aAAa,CAAC,CAAC;IAClC,IAAI,CAACK,KAAK,EAAE,OAAO,KAAK;IAExB,IAAI;MACF,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;MACnC,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7C,IAAIE,GAAG,IAAIA,GAAG,CAACI,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAACN,GAAG,CAACI,GAAG,CAAC,EAAE;QAC9C,MAAMG,MAAM,GAAGP,GAAG,CAACI,GAAG,GAAG,IAAI;QAC7B,OAAOI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,MAAM;MAC5B;MACA,OAAO,KAAK;IACd,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,KAAK;IACd;EACF;AACF;AAEA,eAAerB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}