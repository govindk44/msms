{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"http://localhost:8000\"; // Make sure your Django server is running on this port\n\nconst axiosInstance = axios.create({\n  baseURL: apiUrl,\n  timeout: 5000,\n  headers: {\n    accept: \"application/json\"\n  }\n});\n\n// Add a request interceptor to include the authorization header\naxiosInstance.interceptors.request.use(config => {\n  const accessToken = sessionStorage.getItem(\"access_token\");\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n\n// Function to generate a new refresh token if the current token is invalid\nlet isRefreshing = false; // To prevent multiple refresh attempts\n\nconst generateRefreshToken = async error => {\n  if (error.response && error.response.status === 401 && !isRefreshing) {\n    isRefreshing = true; // Prevent multiple refresh calls\n    try {\n      const response = await axios.post(`${apiUrl}/api/token/refresh/`, {\n        refresh: sessionStorage.getItem(\"refresh_token\")\n      }, {\n        withCredentials: false\n      });\n      if (response.status === 200) {\n        // Update the access token\n        sessionStorage.setItem(\"access_token\", response.data.access);\n        axiosInstance.defaults.headers[\"Authorization\"] = `Bearer ${response.data.access}`;\n        return axiosInstance(error.config); // Retry the original request\n      }\n    } catch (refreshError) {\n      console.error(\"Refresh token error:\", refreshError);\n      // Optional: Redirect to login or notify the user\n    } finally {\n      isRefreshing = false; // Reset the refresh flag\n    }\n  }\n  return Promise.reject(error); // Reject if refresh fails\n};\n\n// Add response interceptor to handle 401 errors\naxiosInstance.interceptors.response.use(response => response, error => generateRefreshToken(error));\nexport { apiUrl, axiosInstance, generateRefreshToken };","map":{"version":3,"names":["axios","apiUrl","axiosInstance","create","baseURL","timeout","headers","accept","interceptors","request","use","config","accessToken","sessionStorage","getItem","Authorization","isRefreshing","generateRefreshToken","error","response","status","post","refresh","withCredentials","setItem","data","access","defaults","refreshError","console","Promise","reject"],"sources":["D:/MSMS/frontend/src/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiUrl = \"http://localhost:8000\"; // Make sure your Django server is running on this port\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: apiUrl,\r\n  timeout: 5000,\r\n  headers: {\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include the authorization header\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const accessToken = sessionStorage.getItem(\"access_token\");\r\n  if (accessToken) {\r\n    config.headers.Authorization = `Bearer ${accessToken}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Function to generate a new refresh token if the current token is invalid\r\nlet isRefreshing = false; // To prevent multiple refresh attempts\r\n\r\nconst generateRefreshToken = async (error) => {\r\n  if (error.response && error.response.status === 401 && !isRefreshing) {\r\n    isRefreshing = true; // Prevent multiple refresh calls\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiUrl}/api/token/refresh/`,\r\n        {\r\n          refresh: sessionStorage.getItem(\"refresh_token\"),\r\n        },\r\n        { withCredentials: false }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        // Update the access token\r\n        sessionStorage.setItem(\"access_token\", response.data.access);\r\n        axiosInstance.defaults.headers[\"Authorization\"] = `Bearer ${response.data.access}`;\r\n        return axiosInstance(error.config); // Retry the original request\r\n      }\r\n    } catch (refreshError) {\r\n      console.error(\"Refresh token error:\", refreshError);\r\n      // Optional: Redirect to login or notify the user\r\n    } finally {\r\n      isRefreshing = false; // Reset the refresh flag\r\n    }\r\n  }\r\n\r\n  return Promise.reject(error); // Reject if refresh fails\r\n};\r\n\r\n// Add response interceptor to handle 401 errors\r\naxiosInstance.interceptors.response.use(\r\n  response => response,\r\n  error => generateRefreshToken(error)\r\n);\r\n\r\nexport { apiUrl, axiosInstance, generateRefreshToken };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,uBAAuB,CAAC,CAAC;;AAExC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,MAAM;EACfI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACPC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;AACAL,aAAa,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACjD,MAAMC,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;EAC1D,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,WAAW,EAAE;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,IAAIK,YAAY,GAAG,KAAK,CAAC,CAAC;;AAE1B,MAAMC,oBAAoB,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAI,CAACJ,YAAY,EAAE;IACpEA,YAAY,GAAG,IAAI,CAAC,CAAC;IACrB,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMnB,KAAK,CAACqB,IAAI,CAC/B,GAAGpB,MAAM,qBAAqB,EAC9B;QACEqB,OAAO,EAAET,cAAc,CAACC,OAAO,CAAC,eAAe;MACjD,CAAC,EACD;QAAES,eAAe,EAAE;MAAM,CAC3B,CAAC;MAED,IAAIJ,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B;QACAP,cAAc,CAACW,OAAO,CAAC,cAAc,EAAEL,QAAQ,CAACM,IAAI,CAACC,MAAM,CAAC;QAC5DxB,aAAa,CAACyB,QAAQ,CAACrB,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUa,QAAQ,CAACM,IAAI,CAACC,MAAM,EAAE;QAClF,OAAOxB,aAAa,CAACgB,KAAK,CAACP,MAAM,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC,OAAOiB,YAAY,EAAE;MACrBC,OAAO,CAACX,KAAK,CAAC,sBAAsB,EAAEU,YAAY,CAAC;MACnD;IACF,CAAC,SAAS;MACRZ,YAAY,GAAG,KAAK,CAAC,CAAC;IACxB;EACF;EAEA,OAAOc,OAAO,CAACC,MAAM,CAACb,KAAK,CAAC,CAAC,CAAC;AAChC,CAAC;;AAED;AACAhB,aAAa,CAACM,YAAY,CAACW,QAAQ,CAACT,GAAG,CACrCS,QAAQ,IAAIA,QAAQ,EACpBD,KAAK,IAAID,oBAAoB,CAACC,KAAK,CACrC,CAAC;AAED,SAASjB,MAAM,EAAEC,aAAa,EAAEe,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}