{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode'; // Corrected import\nimport { useNavigate } from 'react-router-dom';\nconst handleLogin = async e => {\n  e.preventDefault();\n  const endpoint = isAdmin ? 'http://localhost:8000/api/admin/login/' : 'http://localhost:8000/api/user/login/';\n  console.log(\"Login Credentials:\", credentials); // Add this line for debugging\n\n  try {\n    const response = await axios.post(endpoint, credentials, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const {\n      access,\n      refresh\n    } = response.data;\n\n    // Store tokens and handle user type\n    sessionStorage.setItem('access_token', access);\n    sessionStorage.setItem('refresh_token', refresh);\n    const user = jwtDecode(access);\n    const userType = user.user_type;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n    if (isAdmin || userType === 'admin') {\n      navigate('/admin/dashboard');\n    } else {\n      navigate('/user/dashboard');\n    }\n  } catch (error) {\n    console.error(\"Login Error:\", error); // Log the entire error object\n    if (error.response) {\n      console.log(\"Response data:\", error.response.data); // Log response data\n      console.log(\"Response status:\", error.response.status); // Log response status\n      if (error.response.status === 400) {\n        setError('Invalid username or password.');\n      } else if (error.response.status === 401) {\n        setError('Unauthorized. Please check your credentials.');\n      } else {\n        setError('Login failed. Please try again.');\n      }\n    } else if (error.request) {\n      setError('No response from the server. Please check your network connection.');\n    } else {\n      setError('An unknown error occurred.');\n    }\n  }\n};\nexport default Login;","map":{"version":3,"names":["React","useState","useEffect","axios","jwtDecode","useNavigate","handleLogin","e","preventDefault","endpoint","isAdmin","console","log","credentials","response","post","headers","access","refresh","data","sessionStorage","setItem","user","userType","user_type","defaults","common","navigate","error","status","setError","request","Login"],"sources":["D:/msms/frontend/src/pages/Login.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode'; // Corrected import\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst handleLogin = async (e) => {\r\n  e.preventDefault();\r\n  const endpoint = isAdmin ? 'http://localhost:8000/api/admin/login/' : 'http://localhost:8000/api/user/login/';\r\n  \r\n  console.log(\"Login Credentials:\", credentials); // Add this line for debugging\r\n\r\n  try {\r\n    const response = await axios.post(endpoint, credentials, {\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n\r\n    const { access, refresh } = response.data;\r\n\r\n    // Store tokens and handle user type\r\n    sessionStorage.setItem('access_token', access);\r\n    sessionStorage.setItem('refresh_token', refresh);\r\n\r\n    const user = jwtDecode(access);\r\n    const userType = user.user_type;\r\n\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${access}`;\r\n\r\n    if (isAdmin || userType === 'admin') {\r\n      navigate('/admin/dashboard');\r\n    } else {\r\n      navigate('/user/dashboard');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Login Error:\", error); // Log the entire error object\r\n    if (error.response) {\r\n      console.log(\"Response data:\", error.response.data); // Log response data\r\n      console.log(\"Response status:\", error.response.status); // Log response status\r\n      if (error.response.status === 400) {\r\n        setError('Invalid username or password.');\r\n      } else if (error.response.status === 401) {\r\n        setError('Unauthorized. Please check your credentials.');\r\n      } else {\r\n        setError('Login failed. Please try again.');\r\n      }\r\n    } else if (error.request) {\r\n      setError('No response from the server. Please check your network connection.');\r\n    } else {\r\n      setError('An unknown error occurred.');\r\n    }\r\n  }\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,WAAW,GAAG,MAAOC,CAAC,IAAK;EAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,MAAMC,QAAQ,GAAGC,OAAO,GAAG,wCAAwC,GAAG,uCAAuC;EAE7GC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,WAAW,CAAC,CAAC,CAAC;;EAEhD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAACN,QAAQ,EAAEI,WAAW,EAAE;MACvDG,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEF,MAAM;MAAEC,MAAM;MAAEC;IAAQ,CAAC,GAAGJ,QAAQ,CAACK,IAAI;;IAEzC;IACAC,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEJ,MAAM,CAAC;IAC9CG,cAAc,CAACC,OAAO,CAAC,eAAe,EAAEH,OAAO,CAAC;IAEhD,MAAMI,IAAI,GAAGlB,SAAS,CAACa,MAAM,CAAC;IAC9B,MAAMM,QAAQ,GAAGD,IAAI,CAACE,SAAS;IAE/BrB,KAAK,CAACsB,QAAQ,CAACT,OAAO,CAACU,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUT,MAAM,EAAE;IAEnE,IAAIP,OAAO,IAAIa,QAAQ,KAAK,OAAO,EAAE;MACnCI,QAAQ,CAAC,kBAAkB,CAAC;IAC9B,CAAC,MAAM;MACLA,QAAQ,CAAC,iBAAiB,CAAC;IAC7B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtC,IAAIA,KAAK,CAACd,QAAQ,EAAE;MAClBH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEgB,KAAK,CAACd,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;MACpDR,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEgB,KAAK,CAACd,QAAQ,CAACe,MAAM,CAAC,CAAC,CAAC;MACxD,IAAID,KAAK,CAACd,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;QACjCC,QAAQ,CAAC,+BAA+B,CAAC;MAC3C,CAAC,MAAM,IAAIF,KAAK,CAACd,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;QACxCC,QAAQ,CAAC,8CAA8C,CAAC;MAC1D,CAAC,MAAM;QACLA,QAAQ,CAAC,iCAAiC,CAAC;MAC7C;IACF,CAAC,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;MACxBD,QAAQ,CAAC,oEAAoE,CAAC;IAChF,CAAC,MAAM;MACLA,QAAQ,CAAC,4BAA4B,CAAC;IACxC;EACF;AACF,CAAC;AAED,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}