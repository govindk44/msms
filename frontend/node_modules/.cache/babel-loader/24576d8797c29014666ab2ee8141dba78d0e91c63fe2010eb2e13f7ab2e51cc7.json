{"ast":null,"code":"var _jsxFileName = \"C:\\\\msms\\\\msms\\\\frontend\\\\src\\\\postlogin\\\\Admin\\\\RazorpayPayment .js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RazorpayPayment = ({\n  cartItems\n}) => {\n  _s();\n  const [totalAmount, setTotalAmount] = useState(0);\n\n  // Calculate total amount from cart items\n  useEffect(() => {\n    if (cartItems && cartItems.length > 0) {\n      const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n      setTotalAmount(total);\n    }\n  }, [cartItems]);\n  const handlePayment = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/medical_store_app/create-order/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amount: totalAmount * 100\n        }) // Amount in paise\n      });\n      const data = await response.json();\n      if (data.order_id) {\n        const options = {\n          key: \"your_razorpay_key_id\",\n          // Replace with your Razorpay Key ID\n          amount: totalAmount * 100,\n          // Amount in paise\n          currency: \"INR\",\n          order_id: data.order_id,\n          name: \"Your Company Name\",\n          description: \"Payment for your order\",\n          handler: function (response) {\n            console.log(\"Payment successful!\", response);\n            // Handle post-payment logic here (e.g., save to database, show confirmation)\n          },\n          prefill: {\n            name: \"Customer Name\",\n            email: \"customer@example.com\",\n            contact: \"9999999999\"\n          },\n          theme: {\n            color: \"#3399cc\"\n          }\n        };\n        const razorpay = new window.Razorpay(options);\n        razorpay.open();\n      } else {\n        console.error(\"Failed to create Razorpay order\");\n      }\n    } catch (error) {\n      console.error(\"Error during payment:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Total Amount: \\u20B9\", totalAmount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: totalAmount === 0,\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(RazorpayPayment, \"SUa8ghDFNOR0vt5LwSF9oBxSx+M=\");\n_c = RazorpayPayment;\nexport default RazorpayPayment;\nvar _c;\n$RefreshReg$(_c, \"RazorpayPayment\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RazorpayPayment","cartItems","_s","totalAmount","setTotalAmount","length","total","reduce","sum","item","price","quantity","handlePayment","response","fetch","method","headers","body","JSON","stringify","amount","data","json","order_id","options","key","currency","name","description","handler","console","log","prefill","email","contact","theme","color","razorpay","window","Razorpay","open","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/msms/msms/frontend/src/postlogin/Admin/RazorpayPayment .js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst RazorpayPayment = ({ cartItems }) => {\r\n    const [totalAmount, setTotalAmount] = useState(0);\r\n\r\n    // Calculate total amount from cart items\r\n    useEffect(() => {\r\n        if (cartItems && cartItems.length > 0) {\r\n            const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n            setTotalAmount(total);\r\n        }\r\n    }, [cartItems]);\r\n\r\n    const handlePayment = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:8000/medical_store_app/create-order/\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ amount: totalAmount * 100 }), // Amount in paise\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.order_id) {\r\n                const options = {\r\n                    key: \"your_razorpay_key_id\", // Replace with your Razorpay Key ID\r\n                    amount: totalAmount * 100, // Amount in paise\r\n                    currency: \"INR\",\r\n                    order_id: data.order_id,\r\n                    name: \"Your Company Name\",\r\n                    description: \"Payment for your order\",\r\n                    handler: function (response) {\r\n                        console.log(\"Payment successful!\", response);\r\n                        // Handle post-payment logic here (e.g., save to database, show confirmation)\r\n                    },\r\n                    prefill: {\r\n                        name: \"Customer Name\",\r\n                        email: \"customer@example.com\",\r\n                        contact: \"9999999999\",\r\n                    },\r\n                    theme: {\r\n                        color: \"#3399cc\",\r\n                    },\r\n                };\r\n\r\n                const razorpay = new window.Razorpay(options);\r\n                razorpay.open();\r\n            } else {\r\n                console.error(\"Failed to create Razorpay order\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error during payment:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Total Amount: â‚¹{totalAmount}</h3>\r\n            <button onClick={handlePayment} disabled={totalAmount === 0}>\r\n                Pay Now\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RazorpayPayment;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACAC,SAAS,CAAC,MAAM;IACZ,IAAII,SAAS,IAAIA,SAAS,CAACI,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,KAAK,GAAGL,SAAS,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;MAClFP,cAAc,CAACE,KAAK,CAAC;IACzB;EACJ,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAuD,EAAE;QAClFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAEjB,WAAW,GAAG;QAAI,CAAC,CAAC,CAAE;MACzD,CAAC,CAAC;MAEF,MAAMkB,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,QAAQ,EAAE;QACf,MAAMC,OAAO,GAAG;UACZC,GAAG,EAAE,sBAAsB;UAAE;UAC7BL,MAAM,EAAEjB,WAAW,GAAG,GAAG;UAAE;UAC3BuB,QAAQ,EAAE,KAAK;UACfH,QAAQ,EAAEF,IAAI,CAACE,QAAQ;UACvBI,IAAI,EAAE,mBAAmB;UACzBC,WAAW,EAAE,wBAAwB;UACrCC,OAAO,EAAE,SAAAA,CAAUhB,QAAQ,EAAE;YACzBiB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAElB,QAAQ,CAAC;YAC5C;UACJ,CAAC;UACDmB,OAAO,EAAE;YACLL,IAAI,EAAE,eAAe;YACrBM,KAAK,EAAE,sBAAsB;YAC7BC,OAAO,EAAE;UACb,CAAC;UACDC,KAAK,EAAE;YACHC,KAAK,EAAE;UACX;QACJ,CAAC;QAED,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAACf,OAAO,CAAC;QAC7Ca,QAAQ,CAACG,IAAI,CAAC,CAAC;MACnB,CAAC,MAAM;QACHV,OAAO,CAACW,KAAK,CAAC,iCAAiC,CAAC;MACpD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;EAED,oBACI1C,OAAA;IAAA2C,QAAA,gBACI3C,OAAA;MAAA2C,QAAA,GAAI,sBAAe,EAACvC,WAAW;IAAA;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrC/C,OAAA;MAAQgD,OAAO,EAAEnC,aAAc;MAACoC,QAAQ,EAAE7C,WAAW,KAAK,CAAE;MAAAuC,QAAA,EAAC;IAE7D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAC5C,EAAA,CA/DIF,eAAe;AAAAiD,EAAA,GAAfjD,eAAe;AAiErB,eAAeA,eAAe;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}