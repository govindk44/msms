{"ast":null,"code":"var _jsxFileName = \"C:\\\\msms\\\\msms\\\\frontend\\\\src\\\\postlogin\\\\User\\\\PrescriptionForm .js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrescriptionForm() {\n  _s();\n  // Initialize the medicines state as an empty array\n  const [medicines, setMedicines] = useState([]);\n\n  // Fetch medicines data\n  useEffect(() => {\n    // Replace with your actual data fetching logic\n    fetch('/api/medicines') // Assuming your API endpoint is '/api/medicines'\n    .then(response => response.json()).then(data => {\n      // Check if the data is an array, otherwise set to an empty array\n      if (Array.isArray(data)) {\n        setMedicines(data);\n      } else {\n        console.error('Medicine data is not in expected format:', data);\n        setMedicines([]); // Default to empty array if the data is not in expected format\n      }\n    }).catch(error => {\n      console.error('Error fetching medicines:', error);\n      setMedicines([]); // Handle error case and set empty array\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Array.isArray(medicines) && medicines.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Medicines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), medicines.map(medicine => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: medicine.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: medicine.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: medicine.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, medicine.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No medicines available or data is not in the expected format.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(PrescriptionForm, \"ZxXDyD5zuog6csW41MwgtHmUf9w=\");\n_c = PrescriptionForm;\nexport default PrescriptionForm;\nvar _c;\n$RefreshReg$(_c, \"PrescriptionForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PrescriptionForm","_s","medicines","setMedicines","fetch","then","response","json","data","Array","isArray","console","error","catch","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","medicine","name","price","description","id","_c","$RefreshReg$"],"sources":["C:/msms/msms/frontend/src/postlogin/User/PrescriptionForm .js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction PrescriptionForm() {\r\n  // Initialize the medicines state as an empty array\r\n  const [medicines, setMedicines] = useState([]);\r\n\r\n  // Fetch medicines data\r\n  useEffect(() => {\r\n    // Replace with your actual data fetching logic\r\n    fetch('/api/medicines')  // Assuming your API endpoint is '/api/medicines'\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Check if the data is an array, otherwise set to an empty array\r\n        if (Array.isArray(data)) {\r\n          setMedicines(data);\r\n        } else {\r\n          console.error('Medicine data is not in expected format:', data);\r\n          setMedicines([]);  // Default to empty array if the data is not in expected format\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching medicines:', error);\r\n        setMedicines([]);  // Handle error case and set empty array\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Ensure medicines is always an array before calling .map */}\r\n      {Array.isArray(medicines) && medicines.length > 0 ? (\r\n        <div>\r\n          <h3>Select Medicines</h3>\r\n          {medicines.map(medicine => (\r\n            <div key={medicine.id}>\r\n              <p>{medicine.name}</p>\r\n              <p>{medicine.price}</p>\r\n              <p>{medicine.description}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>No medicines available or data is not in the expected format.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrescriptionForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAAC,gBAAgB,CAAC,CAAE;IAAA,CACtBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ;MACA,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;QACvBL,YAAY,CAACK,IAAI,CAAC;MACpB,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEJ,IAAI,CAAC;QAC/DL,YAAY,CAAC,EAAE,CAAC,CAAC,CAAE;MACrB;IACF,CAAC,CAAC,CACDU,KAAK,CAACD,KAAK,IAAI;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDT,YAAY,CAAC,EAAE,CAAC,CAAC,CAAE;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEJ,OAAA;IAAAe,QAAA,EAEGL,KAAK,CAACC,OAAO,CAACR,SAAS,CAAC,IAAIA,SAAS,CAACa,MAAM,GAAG,CAAC,gBAC/ChB,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAI;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACxBjB,SAAS,CAACkB,GAAG,CAACC,QAAQ,iBACrBtB,OAAA;QAAAe,QAAA,gBACEf,OAAA;UAAAe,QAAA,EAAIO,QAAQ,CAACC;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBpB,OAAA;UAAAe,QAAA,EAAIO,QAAQ,CAACE;QAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBpB,OAAA;UAAAe,QAAA,EAAIO,QAAQ,CAACG;QAAW;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHrBE,QAAQ,CAACI,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIhB,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,gBAENpB,OAAA;MAAAe,QAAA,EAAG;IAA6D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACpE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAClB,EAAA,CA3CQD,gBAAgB;AAAA0B,EAAA,GAAhB1B,gBAAgB;AA6CzB,eAAeA,gBAAgB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}