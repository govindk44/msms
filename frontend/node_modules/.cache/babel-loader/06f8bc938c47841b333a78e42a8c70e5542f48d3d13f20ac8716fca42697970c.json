{"ast":null,"code":"var _jsxFileName = \"C:\\\\msms\\\\msms\\\\frontend\\\\src\\\\postlogin\\\\User\\\\PaymentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentPage = ({\n  userId\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [medicines, setMedicines] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n\n  // Fetch the medicines data from the API only if userId is available\n  useEffect(() => {\n    if (!userId) {\n      setError('User ID is missing');\n      return; // Exit early if userId is not available\n    }\n    const fetchMedicines = async () => {\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`http://localhost:8000/medical_store_app/orders/medicines/${userId}/`,\n        // Replace with the correct endpoint\n        {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}` // Assuming JWT token\n          }\n        });\n\n        // Assuming the response returns a list of medicines\n        const medicinesData = response.data.medicines;\n        setMedicines(medicinesData);\n        calculateTotal(medicinesData);\n      } catch (err) {\n        console.error(err);\n        setError('Failed to fetch medicines. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMedicines();\n  }, [userId]); // Re-run this effect if userId changes\n\n  // Calculate the total amount from the medicines data\n  const calculateTotal = medicines => {\n    let total = 0;\n    medicines.forEach(medicine => {\n      if (medicine.price && medicine.quantity) {\n        total += medicine.price * medicine.quantity;\n      }\n    });\n    setTotalAmount(total);\n  };\n  const handlePlaceOrder = async () => {\n    try {\n      setIsLoading(true);\n      const response = await axios.post('http://localhost:8000/medical_store_app/orders/',\n      // The API endpoint for placing an order\n      {\n        user_id: userId,\n        medicines: medicines.map(m => m.id),\n        // Assuming medicines have 'id' property\n        total_amount: totalAmount,\n        payment_type: 'COD' // Hardcoding COD for this example\n      }, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}` // Assuming JWT for authentication\n        }\n      });\n      console.log(response.data); // Handle success\n      alert('Order placed successfully!');\n    } catch (err) {\n      console.error(err);\n      setError('Something went wrong. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Payment Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Payment Method: Cash on Delivery (COD)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Amount: $\", totalAmount.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlaceOrder,\n      disabled: isLoading,\n      children: isLoading ? 'Placing Order...' : 'Place Order'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(PaymentPage, \"7FOlAngLn2l6j5T+DniCFuj4WJk=\");\n_c = PaymentPage;\nexport default PaymentPage;\nvar _c;\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PaymentPage","userId","_s","isLoading","setIsLoading","error","setError","medicines","setMedicines","totalAmount","setTotalAmount","fetchMedicines","response","get","headers","localStorage","getItem","medicinesData","data","calculateTotal","err","console","total","forEach","medicine","price","quantity","handlePlaceOrder","post","user_id","map","m","id","total_amount","payment_type","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","style","color","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/msms/msms/frontend/src/postlogin/User/PaymentForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PaymentPage = ({ userId }) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [medicines, setMedicines] = useState([]);\r\n    const [totalAmount, setTotalAmount] = useState(0);\r\n\r\n    // Fetch the medicines data from the API only if userId is available\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            setError('User ID is missing');\r\n            return;  // Exit early if userId is not available\r\n        }\r\n\r\n        const fetchMedicines = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const response = await axios.get(\r\n                    `http://localhost:8000/medical_store_app/orders/medicines/${userId}/`,  // Replace with the correct endpoint\r\n                    {\r\n                        headers: {\r\n                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`, // Assuming JWT token\r\n                        },\r\n                    }\r\n                );\r\n                \r\n                // Assuming the response returns a list of medicines\r\n                const medicinesData = response.data.medicines;\r\n                setMedicines(medicinesData);\r\n                calculateTotal(medicinesData);\r\n            } catch (err) {\r\n                console.error(err);\r\n                setError('Failed to fetch medicines. Please try again.');\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMedicines();\r\n    }, [userId]);  // Re-run this effect if userId changes\r\n\r\n    // Calculate the total amount from the medicines data\r\n    const calculateTotal = (medicines) => {\r\n        let total = 0;\r\n        medicines.forEach((medicine) => {\r\n            if (medicine.price && medicine.quantity) {\r\n                total += medicine.price * medicine.quantity;\r\n            }\r\n        });\r\n        setTotalAmount(total);\r\n    };\r\n\r\n    const handlePlaceOrder = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await axios.post(\r\n                'http://localhost:8000/medical_store_app/orders/',  // The API endpoint for placing an order\r\n                {\r\n                    user_id: userId,\r\n                    medicines: medicines.map(m => m.id),  // Assuming medicines have 'id' property\r\n                    total_amount: totalAmount,\r\n                    payment_type: 'COD',  // Hardcoding COD for this example\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`,  // Assuming JWT for authentication\r\n                    },\r\n                }\r\n            );\r\n\r\n            console.log(response.data);  // Handle success\r\n            alert('Order placed successfully!');\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError('Something went wrong. Please try again.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Payment Page</h1>\r\n            <p>Payment Method: Cash on Delivery (COD)</p>\r\n            <p>Total Amount: ${totalAmount.toFixed(2)}</p>\r\n            \r\n            {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n            <button onClick={handlePlaceOrder} disabled={isLoading}>\r\n                {isLoading ? 'Placing Order...' : 'Place Order'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PaymentPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}