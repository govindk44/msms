{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"http://localhost:8000\";\nconst axiosInstance = axios.create({\n  baseURL: apiUrl,\n  timeout: 5000,\n  headers: {\n    Authorization: sessionStorage.getItem(\"access_token\") ? \"Bearer \" + sessionStorage.getItem(\"access_token\") : null,\n    accept: \"application/json\"\n  }\n});\nconst generateRefreshToken = async error => {\n  let refresh = false;\n  if (error.response.status === 401 && !refresh) {\n    refresh = true;\n    const response = await axios.post(`${apiUrl}/api/token/refresh/`, {\n      refresh: sessionStorage.getItem(\"refresh_token\")\n    }, {\n      withCredentials: false\n    });\n    if (response.status === 200) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.access}`;\n      //return axios(error.config);\n    }\n  }\n  refresh = false;\n  return error;\n};\naxios.post('http://localhost:8000/api/admin/login/', {\n  username: 'admin',\n  password: 'password'\n}).then(response => {\n  console.log('Login successful', response.data);\n}).catch(error => {\n  console.error('Error logging in', error);\n});\nexport { apiUrl, axiosInstance, generateRefreshToken };","map":{"version":3,"names":["axios","apiUrl","axiosInstance","create","baseURL","timeout","headers","Authorization","sessionStorage","getItem","accept","generateRefreshToken","error","refresh","response","status","post","withCredentials","defaults","common","data","access","username","password","then","console","log","catch"],"sources":["D:/msms/frontend/src/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiUrl = \"http://localhost:8000\";\r\nconst axiosInstance = axios.create({\r\n  baseURL: apiUrl,\r\n  timeout: 5000,\r\n  headers: {\r\n    Authorization: sessionStorage.getItem(\"access_token\")\r\n      ? \"Bearer \" + sessionStorage.getItem(\"access_token\")\r\n      : null,\r\n\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\nconst generateRefreshToken = async (error) => {\r\n  let refresh = false;\r\n  if (error.response.status === 401 && !refresh) {\r\n    refresh = true;\r\n    const response = await axios.post(\r\n      `${apiUrl}/api/token/refresh/`,\r\n      {\r\n        refresh: sessionStorage.getItem(\"refresh_token\"),\r\n      },\r\n      { withCredentials: false }\r\n    );\r\n    if (response.status === 200) {\r\n      axios.defaults.headers.common[\r\n        \"Authorization\"\r\n      ] = `Bearer ${response.data.access}`;\r\n      //return axios(error.config);\r\n    }\r\n  }\r\n\r\n  refresh = false;\r\n  return error;\r\n};\r\n\r\naxios.post('http://localhost:8000/api/admin/login/', {\r\n  username: 'admin',\r\n  password: 'password'\r\n})\r\n.then(response => {\r\n  console.log('Login successful', response.data);\r\n})\r\n.catch(error => {\r\n  console.error('Error logging in', error);\r\n});\r\n\r\n\r\nexport { apiUrl, axiosInstance, generateRefreshToken };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,uBAAuB;AACtC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,MAAM;EACfI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACPC,aAAa,EAAEC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GACjD,SAAS,GAAGD,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GAClD,IAAI;IAERC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,MAAMC,oBAAoB,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAID,KAAK,CAACE,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAI,CAACF,OAAO,EAAE;IAC7CA,OAAO,GAAG,IAAI;IACd,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACgB,IAAI,CAC/B,GAAGf,MAAM,qBAAqB,EAC9B;MACEY,OAAO,EAAEL,cAAc,CAACC,OAAO,CAAC,eAAe;IACjD,CAAC,EACD;MAAEQ,eAAe,EAAE;IAAM,CAC3B,CAAC;IACD,IAAIH,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3Bf,KAAK,CAACkB,QAAQ,CAACZ,OAAO,CAACa,MAAM,CAC3B,eAAe,CAChB,GAAG,UAAUL,QAAQ,CAACM,IAAI,CAACC,MAAM,EAAE;MACpC;IACF;EACF;EAEAR,OAAO,GAAG,KAAK;EACf,OAAOD,KAAK;AACd,CAAC;AAEDZ,KAAK,CAACgB,IAAI,CAAC,wCAAwC,EAAE;EACnDM,QAAQ,EAAE,OAAO;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC,CACDC,IAAI,CAACV,QAAQ,IAAI;EAChBW,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEZ,QAAQ,CAACM,IAAI,CAAC;AAChD,CAAC,CAAC,CACDO,KAAK,CAACf,KAAK,IAAI;EACda,OAAO,CAACb,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;AAC1C,CAAC,CAAC;AAGF,SAASX,MAAM,EAAEC,aAAa,EAAES,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}