{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nconst Checkout = () => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [paymentType, setPaymentType] = useState(\"Card\");\n  const [cardDetails, setCardDetails] = useState({\n    cardNumber: \"\",\n    cvv: \"\",\n    expiryDate: \"\"\n  });\n  const [address, setAddress] = useState(\"\");\n  const [addressChanged, setAddressChanged] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchCartData = async () => {\n      try {\n        const userId = sessionStorage.getItem(\"user_id\");\n        if (!userId) {\n          alert(\"Please log in to view your cart.\");\n          navigate(\"/login\");\n          return;\n        }\n        const cartResponse = await axios.post(\"http://localhost:8000/medical_store_app/cart/\", {\n          user_id: userId\n        });\n        if (cartResponse.data && cartResponse.data.cart_items) {\n          setCartItems(cartResponse.data.cart_items);\n          setTotalPrice(cartResponse.data.total_price);\n        } else {\n          console.error(\"Invalid cart data:\", cartResponse.data);\n        }\n        const addressResponse = await axios.get(`http://localhost:8000/medical_store_app/get_address/${userId}`);\n        if (addressResponse.data) {\n          const {\n            street,\n            city,\n            state,\n            postal_code,\n            phone_no\n          } = addressResponse.data;\n          const fullAddress = `${street}, ${city}, ${state} - ${postal_code}, ${phone_no}`;\n          setAddress(fullAddress);\n        } else {\n          console.error(\"No address found for user:\", userId);\n          setAddress(\"\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setAddress(\"\");\n      }\n    };\n    fetchCartData();\n  }, [navigate]);\n  const handlePaymentTypeChange = e => {\n    setPaymentType(e.target.value);\n    if (e.target.value !== \"Card\") {\n      setCardDetails({\n        cardNumber: \"\",\n        cvv: \"\",\n        expiryDate: \"\"\n      });\n    }\n  };\n  const handleCardDetailsChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCardDetails(prevDetails => ({\n      ...prevDetails,\n      [name]: value\n    }));\n  };\n  const handlePayment = async () => {\n    if (!address.trim()) {\n      alert(\"Please add your billing address.\");\n      return;\n    }\n    const userId = sessionStorage.getItem(\"user_id\");\n    if (!userId) {\n      alert(\"Please log in.\");\n      navigate(\"/login\");\n      return;\n    }\n    const paymentData = {\n      payment_type: paymentType,\n      user_id: userId,\n      cart_items: cartItems,\n      total_price: totalPrice\n    };\n    if (paymentType === \"Card\") {\n      const {\n        cardNumber,\n        cvv,\n        expiryDate\n      } = cardDetails;\n      if (!cardNumber || !cvv || !expiryDate) {\n        alert(\"Please fill in all card details.\");\n        return;\n      }\n      paymentData.card_details = cardDetails;\n      try {\n        const response = await axios.post(\"http://localhost:8000/medical_store_app/card-payment/\", paymentData, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.data.status === \"success\") {\n          alert(response.data.message);\n          navigate(\"/UserProductViews\");\n        } else {\n          alert(\"Payment failed: \" + response.data.error);\n        }\n      } catch (error) {\n        console.error(\"Payment error:\", error);\n        alert(\"An error occurred during payment.\");\n      }\n    } else if (paymentType === \"Cash\") {\n      try {\n        const response = await axios.post(\"http://localhost:8000/medical_store_app/cod-order/\", paymentData, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.data.status === \"success\") {\n          alert(response.data.message);\n          navigate(\"/UserProductViews\");\n        } else {\n          alert(\"Order failed: \" + response.data.error);\n        }\n      } catch (error) {\n        console.error(\"Order error:\", error);\n        alert(\"An error occurred with your order.\");\n      }\n    }\n  };\n};\n_s(Checkout, \"ERpOkG3na8uAu2UeUd/f9XMJsVQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Checkout;\nexport default Checkout;\nvar _c;\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","Checkout","_s","cartItems","setCartItems","totalPrice","setTotalPrice","paymentType","setPaymentType","cardDetails","setCardDetails","cardNumber","cvv","expiryDate","address","setAddress","addressChanged","setAddressChanged","navigate","fetchCartData","userId","sessionStorage","getItem","alert","cartResponse","post","user_id","data","cart_items","total_price","console","error","addressResponse","get","street","city","state","postal_code","phone_no","fullAddress","handlePaymentTypeChange","e","target","value","handleCardDetailsChange","name","prevDetails","handlePayment","trim","paymentData","payment_type","card_details","response","headers","status","message","_c","$RefreshReg$"],"sources":["C:/msms/msms/frontend/src/postlogin/User/checkout.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst Checkout = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [paymentType, setPaymentType] = useState(\"Card\");\r\n  const [cardDetails, setCardDetails] = useState({\r\n    cardNumber: \"\",\r\n    cvv: \"\",\r\n    expiryDate: \"\",\r\n  });\r\n  const [address, setAddress] = useState(\"\");\r\n  const [addressChanged, setAddressChanged] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchCartData = async () => {\r\n      try {\r\n        const userId = sessionStorage.getItem(\"user_id\");\r\n        if (!userId) {\r\n          alert(\"Please log in to view your cart.\");\r\n          navigate(\"/login\");\r\n          return;\r\n        }\r\n        const cartResponse = await axios.post(\"http://localhost:8000/medical_store_app/cart/\", {\r\n          user_id: userId,\r\n        });\r\n\r\n        if (cartResponse.data && cartResponse.data.cart_items) {\r\n          setCartItems(cartResponse.data.cart_items);\r\n          setTotalPrice(cartResponse.data.total_price);\r\n        } else {\r\n          console.error(\"Invalid cart data:\", cartResponse.data);\r\n        }\r\n\r\n        const addressResponse = await axios.get(`http://localhost:8000/medical_store_app/get_address/${userId}`);\r\n        if (addressResponse.data) {\r\n          const { street, city, state, postal_code, phone_no } = addressResponse.data;\r\n          const fullAddress = `${street}, ${city}, ${state} - ${postal_code}, ${phone_no}`;\r\n          setAddress(fullAddress);\r\n        } else {\r\n          console.error(\"No address found for user:\", userId);\r\n          setAddress(\"\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setAddress(\"\");\r\n      }\r\n    };\r\n\r\n    fetchCartData();\r\n  }, [navigate]);\r\n\r\n  const handlePaymentTypeChange = (e) => {\r\n    setPaymentType(e.target.value);\r\n    if (e.target.value !== \"Card\") {\r\n      setCardDetails({ cardNumber: \"\", cvv: \"\", expiryDate: \"\" });\r\n    }\r\n  };\r\n\r\n  const handleCardDetailsChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setCardDetails((prevDetails) => ({\r\n      ...prevDetails,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handlePayment = async () => {\r\n    if (!address.trim()) {\r\n      alert(\"Please add your billing address.\");\r\n      return;\r\n    }\r\n  \r\n    const userId = sessionStorage.getItem(\"user_id\");\r\n    if (!userId) {\r\n      alert(\"Please log in.\");\r\n      navigate(\"/login\");\r\n      return;\r\n    }\r\n  \r\n    const paymentData = {\r\n      payment_type: paymentType,\r\n      user_id: userId,\r\n      cart_items: cartItems,\r\n      total_price: totalPrice,\r\n    };\r\n  \r\n    if (paymentType === \"Card\") {\r\n      const { cardNumber, cvv, expiryDate } = cardDetails;\r\n      if (!cardNumber || !cvv || !expiryDate) {\r\n        alert(\"Please fill in all card details.\");\r\n        return;\r\n      }\r\n      paymentData.card_details = cardDetails;\r\n      try {\r\n        const response = await axios.post(\"http://localhost:8000/medical_store_app/card-payment/\", paymentData, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n  \r\n        if (response.data.status === \"success\") {\r\n          alert(response.data.message);\r\n          navigate(\"/UserProductViews\");\r\n        } else {\r\n          alert(\"Payment failed: \" + response.data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Payment error:\", error);\r\n        alert(\"An error occurred during payment.\");\r\n      }\r\n    } else if (paymentType === \"Cash\") {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:8000/medical_store_app/cod-order/\", paymentData, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n  \r\n        if (response.data.status === \"success\") {\r\n          alert(response.data.message);\r\n          navigate(\"/UserProductViews\");\r\n        } else {\r\n          alert(\"Order failed: \" + response.data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Order error:\", error);\r\n        alert(\"An error occurred with your order.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n};\r\n\r\nexport default Checkout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}