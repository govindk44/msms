{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"http://localhost:8000\";\nconst axiosInstance = axios.create({\n  baseURL: apiUrl,\n  timeout: 5000,\n  headers: {\n    Authorization: sessionStorage.getItem(\"access_token\") ? \"Bearer \" + sessionStorage.getItem(\"access_token\") : null,\n    accept: \"application/json\"\n  }\n});\n\n// Function to refresh the token\n\n// // Axios interceptor to handle token expiration\n// axiosInstance.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       const newAccessToken = await generateRefreshToken();\n//       if (newAccessToken) {\n//         originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\n//         return axiosInstance(originalRequest);\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Example login request\n// axiosInstance\n//   .post(\"/api/admin/login/\", {\n//     username: \"admin\",\n//     password: \"password\",\n//   })\n//   .then((response) => {\n//     console.log(\"Login successful\", response.data);\n//   })\n//   .catch((error) => {\n//     console.error(\"Error logging in\", error);\n//   });","map":{"version":3,"names":["axios","apiUrl","axiosInstance","create","baseURL","timeout","headers","Authorization","sessionStorage","getItem","accept"],"sources":["D:/msms/frontend/src/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiUrl = \"http://localhost:8000\";\r\nconst axiosInstance = axios.create({\r\n  baseURL: apiUrl,\r\n  timeout: 5000,\r\n  headers: {\r\n    Authorization: sessionStorage.getItem(\"access_token\")\r\n      ? \"Bearer \" + sessionStorage.getItem(\"access_token\")\r\n      : null,\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n// Function to refresh the token\r\n\r\n\r\n\r\n// // Axios interceptor to handle token expiration\r\n// axiosInstance.interceptors.response.use(\r\n//   (response) => response,\r\n//   async (error) => {\r\n//     const originalRequest = error.config;\r\n//     if (error.response.status === 401 && !originalRequest._retry) {\r\n//       originalRequest._retry = true;\r\n//       const newAccessToken = await generateRefreshToken();\r\n//       if (newAccessToken) {\r\n//         originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n//         return axiosInstance(originalRequest);\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Example login request\r\n// axiosInstance\r\n//   .post(\"/api/admin/login/\", {\r\n//     username: \"admin\",\r\n//     password: \"password\",\r\n//   })\r\n//   .then((response) => {\r\n//     console.log(\"Login successful\", response.data);\r\n//   })\r\n//   .catch((error) => {\r\n//     console.error(\"Error logging in\", error);\r\n//   });\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,uBAAuB;AACtC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,MAAM;EACfI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACPC,aAAa,EAAEC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GACjD,SAAS,GAAGD,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GAClD,IAAI;IACRC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}